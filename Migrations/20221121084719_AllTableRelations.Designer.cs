// <auto-generated />
using System;
using Boats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlueEconomy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221121084719_AllTableRelations")]
    partial class AllTableRelations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BoatPayments.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BoatStockId")
                        .HasColumnType("int");

                    b.Property<int>("FisherMansGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Paidby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<float>("ammountCredited")
                        .HasColumnType("real");

                    b.Property<float>("ammountdebited")
                        .HasColumnType("real");

                    b.HasKey("PaymentId");

                    b.HasIndex("BoatStockId");

                    b.HasIndex("FisherMansGroupId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Users.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fromWhere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("physicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("auth.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("RolesId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("LoginId");

                    b.HasIndex("RolesId");

                    b.ToTable("logins");
                });

            modelBuilder.Entity("auth.Models.Roles", b =>
                {
                    b.Property<int>("RolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RolesId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("boats.Models.BoatStock", b =>
                {
                    b.Property<int>("BoatStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("boatLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("boatPrice")
                        .HasColumnType("real");

                    b.Property<string>("lifeJacket")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("noAnchor")
                        .HasColumnType("int");

                    b.Property<int>("noOfRope")
                        .HasColumnType("int");

                    b.Property<string>("sneb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sneg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoatStockId");

                    b.ToTable("boatStock");
                });

            modelBuilder.Entity("fboats.Models.Fishboats", b =>
                {
                    b.Property<int>("FishBoatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BoatStockId")
                        .HasColumnType("int");

                    b.Property<string>("noOfTraps")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FishBoatsId");

                    b.HasIndex("BoatStockId")
                        .IsUnique();

                    b.ToTable("fishBoats");
                });

            modelBuilder.Entity("fishers.Models.FisherMansGroup", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("crewName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("physicalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("fisherMansgroup");
                });

            modelBuilder.Entity("fishers.Models.GroupMembers", b =>
                {
                    b.Property<int>("GroupMembersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FisherMansGroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupMembersFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupMembersLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupMembersMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupMembersPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupMembersZMANumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupMembersId");

                    b.HasIndex("FisherMansGroupId");

                    b.ToTable("fisherMansGroupMembers");
                });

            modelBuilder.Entity("loans.Models.LoanBoat", b =>
                {
                    b.Property<int>("LoanBoatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BoatCodeNumbergenerated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BoatStockId")
                        .HasColumnType("int");

                    b.Property<float>("CreditCost")
                        .HasColumnType("real");

                    b.Property<int>("FisherMansGroupId")
                        .HasColumnType("int");

                    b.Property<string>("HiredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("attachment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoanBoatId");

                    b.HasIndex("BoatStockId");

                    b.HasIndex("FisherMansGroupId");

                    b.ToTable("loanBoats");
                });

            modelBuilder.Entity("BoatPayments.Models.Payment", b =>
                {
                    b.HasOne("boats.Models.BoatStock", "BoatStock")
                        .WithMany("Payment")
                        .HasForeignKey("BoatStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fishers.Models.FisherMansGroup", "FisherMansGroup")
                        .WithMany("Payment")
                        .HasForeignKey("FisherMansGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatStock");

                    b.Navigation("FisherMansGroup");
                });

            modelBuilder.Entity("Users.Models.Supplier", b =>
                {
                    b.HasOne("auth.Models.Login", "Login")
                        .WithOne("Supplier")
                        .HasForeignKey("Users.Models.Supplier", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("auth.Models.Login", b =>
                {
                    b.HasOne("auth.Models.Roles", "Roles")
                        .WithMany("logins")
                        .HasForeignKey("RolesId");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("fboats.Models.Fishboats", b =>
                {
                    b.HasOne("boats.Models.BoatStock", "BoatStock")
                        .WithOne("FishBoats")
                        .HasForeignKey("fboats.Models.Fishboats", "BoatStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatStock");
                });

            modelBuilder.Entity("fishers.Models.GroupMembers", b =>
                {
                    b.HasOne("fishers.Models.FisherMansGroup", "FisherMansGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("FisherMansGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FisherMansGroup");
                });

            modelBuilder.Entity("loans.Models.LoanBoat", b =>
                {
                    b.HasOne("boats.Models.BoatStock", "BoatStock")
                        .WithMany("LoanBoat")
                        .HasForeignKey("BoatStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fishers.Models.FisherMansGroup", "FisherMansGroup")
                        .WithMany("LoanBoat")
                        .HasForeignKey("FisherMansGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoatStock");

                    b.Navigation("FisherMansGroup");
                });

            modelBuilder.Entity("auth.Models.Login", b =>
                {
                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("auth.Models.Roles", b =>
                {
                    b.Navigation("logins");
                });

            modelBuilder.Entity("boats.Models.BoatStock", b =>
                {
                    b.Navigation("FishBoats");

                    b.Navigation("LoanBoat");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("fishers.Models.FisherMansGroup", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("LoanBoat");

                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
